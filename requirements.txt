-- üì° RSpy GUI Logger by ChatGPT üòé
-- Hi·ªÉn th·ªã c√°c FireServer / InvokeServer g·ªçi ra tr·ª±c ti·∫øp l√™n m√†n h√¨nh

local Players = game:GetService("Players")
local lp = Players.LocalPlayer

-- T·∫°o GUI
local gui = Instance.new("ScreenGui")
gui.Name = "RSpyGui"
gui.ResetOnSpawn = false
gui.Parent = lp:WaitForChild("PlayerGui")

-- T·∫°o khung hi·ªÉn th·ªã log
local label = Instance.new("TextLabel")
label.Parent = gui
label.Size = UDim2.new(1, 0, 0, 100)
label.Position = UDim2.new(0, 0, 0.85, 0)
label.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
label.TextColor3 = Color3.fromRGB(0, 255, 0)
label.TextScaled = true
label.Font = Enum.Font.Code
label.Text = "üü¢ RSpy Logger ƒëang ho·∫°t ƒë·ªông..."
label.TextWrapped = true

-- H√†m log text
local function logOnScreen(text)
	label.Text = text
end

-- Hook c√°c remote g·ªçi FireServer / InvokeServer
for _, fn in ipairs(getgc(true)) do
	if typeof(fn) == "function" and islclosure(fn) and not is_synapse_function(fn) then
		local info = debug.getinfo(fn)
		local constants = debug.getconstants(fn)

		if table.find(constants, "FireServer") or table.find(constants, "InvokeServer") then
			hookfunction(fn, function(...)
				local args = {...}
				local remote = args[1]
				if typeof(remote) == "Instance" and (remote:IsA("RemoteEvent") or remote:IsA("RemoteFunction")) then
					local log = "üì° " .. remote.ClassName .. " ‚Üí " .. remote:GetFullName()
					for i = 2, #args do
						local argText = typeof(args[i]) == "Instance" and args[i]:GetFullName() or tostring(args[i])
						log = log .. "\nüü® Arg[" .. (i - 1) .. "]: " .. argText
					end
					logOnScreen(log)
				end
				return fn(...)
			end)
		end
	end
end

print("‚úÖ RSpy GUI Logger ƒëang ch·∫°y.")
